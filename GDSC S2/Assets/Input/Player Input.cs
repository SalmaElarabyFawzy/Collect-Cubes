//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/Player Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player Input"",
    ""maps"": [
        {
            ""name"": ""Ball"",
            ""id"": ""a850bd38-2b37-4d43-991d-14b901b4b27a"",
            ""actions"": [
                {
                    ""name"": ""Roll"",
                    ""type"": ""Value"",
                    ""id"": ""1edef129-0208-41d4-a040-85d60594eb5b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Press Space"",
                    ""type"": ""Button"",
                    ""id"": ""a492885f-0f5d-4121-8b85-998d0b9b5eee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Tap Space"",
                    ""type"": ""Button"",
                    ""id"": ""7f7a4207-b713-4e82-9ba1-c88d0467a53a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hold Space"",
                    ""type"": ""Button"",
                    ""id"": ""f36e46a8-7abb-4a52-9ddb-244421b85169"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hold Space2"",
                    ""type"": ""Button"",
                    ""id"": ""918e6d3f-a957-40f7-b753-6d7b4ab90866"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=2)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""eb952a2f-c48f-4558-8e8b-cbcccd4fc896"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""843ef514-b8ac-4cb6-96c4-f6dfdb9df83a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d97fb2b7-4d1e-42e3-8afc-484bed64cf8f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4e71ae99-f102-4a1b-876b-e51493021770"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""78ae78ca-e48b-4e6f-a246-a293cb126237"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""7f4e494e-8a4a-4585-9a65-b45c1d0e5bf9"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a8b9d205-9bca-4eac-a3ca-ffe12adf1401"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6b5f0247-487e-4f25-a6ae-9d631aaba6e0"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""cb51a1cc-e73b-40ce-8c62-b94e193cf2a2"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9358f710-0c6b-4598-9f76-a4b979bd0429"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a14d0cbf-9a54-43d6-8311-ecb591693423"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Press Space"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ac5bb46b-bece-454b-b94d-7b665cefdf8e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tap Space"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""15c4eef5-94a6-4fae-a42e-7a9665365507"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hold Space"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bb9df9dc-cdd2-4e40-9621-bab8e35cc1cb"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hold Space2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Ball
        m_Ball = asset.FindActionMap("Ball", throwIfNotFound: true);
        m_Ball_Roll = m_Ball.FindAction("Roll", throwIfNotFound: true);
        m_Ball_PressSpace = m_Ball.FindAction("Press Space", throwIfNotFound: true);
        m_Ball_TapSpace = m_Ball.FindAction("Tap Space", throwIfNotFound: true);
        m_Ball_HoldSpace = m_Ball.FindAction("Hold Space", throwIfNotFound: true);
        m_Ball_HoldSpace2 = m_Ball.FindAction("Hold Space2", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Ball
    private readonly InputActionMap m_Ball;
    private IBallActions m_BallActionsCallbackInterface;
    private readonly InputAction m_Ball_Roll;
    private readonly InputAction m_Ball_PressSpace;
    private readonly InputAction m_Ball_TapSpace;
    private readonly InputAction m_Ball_HoldSpace;
    private readonly InputAction m_Ball_HoldSpace2;
    public struct BallActions
    {
        private @PlayerInput m_Wrapper;
        public BallActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Roll => m_Wrapper.m_Ball_Roll;
        public InputAction @PressSpace => m_Wrapper.m_Ball_PressSpace;
        public InputAction @TapSpace => m_Wrapper.m_Ball_TapSpace;
        public InputAction @HoldSpace => m_Wrapper.m_Ball_HoldSpace;
        public InputAction @HoldSpace2 => m_Wrapper.m_Ball_HoldSpace2;
        public InputActionMap Get() { return m_Wrapper.m_Ball; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BallActions set) { return set.Get(); }
        public void SetCallbacks(IBallActions instance)
        {
            if (m_Wrapper.m_BallActionsCallbackInterface != null)
            {
                @Roll.started -= m_Wrapper.m_BallActionsCallbackInterface.OnRoll;
                @Roll.performed -= m_Wrapper.m_BallActionsCallbackInterface.OnRoll;
                @Roll.canceled -= m_Wrapper.m_BallActionsCallbackInterface.OnRoll;
                @PressSpace.started -= m_Wrapper.m_BallActionsCallbackInterface.OnPressSpace;
                @PressSpace.performed -= m_Wrapper.m_BallActionsCallbackInterface.OnPressSpace;
                @PressSpace.canceled -= m_Wrapper.m_BallActionsCallbackInterface.OnPressSpace;
                @TapSpace.started -= m_Wrapper.m_BallActionsCallbackInterface.OnTapSpace;
                @TapSpace.performed -= m_Wrapper.m_BallActionsCallbackInterface.OnTapSpace;
                @TapSpace.canceled -= m_Wrapper.m_BallActionsCallbackInterface.OnTapSpace;
                @HoldSpace.started -= m_Wrapper.m_BallActionsCallbackInterface.OnHoldSpace;
                @HoldSpace.performed -= m_Wrapper.m_BallActionsCallbackInterface.OnHoldSpace;
                @HoldSpace.canceled -= m_Wrapper.m_BallActionsCallbackInterface.OnHoldSpace;
                @HoldSpace2.started -= m_Wrapper.m_BallActionsCallbackInterface.OnHoldSpace2;
                @HoldSpace2.performed -= m_Wrapper.m_BallActionsCallbackInterface.OnHoldSpace2;
                @HoldSpace2.canceled -= m_Wrapper.m_BallActionsCallbackInterface.OnHoldSpace2;
            }
            m_Wrapper.m_BallActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Roll.started += instance.OnRoll;
                @Roll.performed += instance.OnRoll;
                @Roll.canceled += instance.OnRoll;
                @PressSpace.started += instance.OnPressSpace;
                @PressSpace.performed += instance.OnPressSpace;
                @PressSpace.canceled += instance.OnPressSpace;
                @TapSpace.started += instance.OnTapSpace;
                @TapSpace.performed += instance.OnTapSpace;
                @TapSpace.canceled += instance.OnTapSpace;
                @HoldSpace.started += instance.OnHoldSpace;
                @HoldSpace.performed += instance.OnHoldSpace;
                @HoldSpace.canceled += instance.OnHoldSpace;
                @HoldSpace2.started += instance.OnHoldSpace2;
                @HoldSpace2.performed += instance.OnHoldSpace2;
                @HoldSpace2.canceled += instance.OnHoldSpace2;
            }
        }
    }
    public BallActions @Ball => new BallActions(this);
    public interface IBallActions
    {
        void OnRoll(InputAction.CallbackContext context);
        void OnPressSpace(InputAction.CallbackContext context);
        void OnTapSpace(InputAction.CallbackContext context);
        void OnHoldSpace(InputAction.CallbackContext context);
        void OnHoldSpace2(InputAction.CallbackContext context);
    }
}
